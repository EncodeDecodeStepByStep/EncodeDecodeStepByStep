package br.unisinos.encodedecodestepbystep.service.codification;

import br.unisinos.encodedecodestepbystep.domain.Codification;
import br.unisinos.encodedecodestepbystep.repository.ReaderInterface;
import br.unisinos.encodedecodestepbystep.repository.WriterInterface;
import br.unisinos.encodedecodestepbystep.utils.StringUtils;
import br.unisinos.encodedecodestepbystep.utils.exceptions.WrongFormatExpection;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

// node class is the basic structure
// of each node present in the Huffman - tree.
class HuffmanNode {
    int data;
    char c;

    HuffmanNode left;
    HuffmanNode right;
}

// comparator class helps to compare the node
// on the basis of one of its attribute.
// Here we will be compared
// on the basis of data values of the nodes.
class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y) {

        return x.data - y.data;
    }
}

@Service
public class HuffmanNodeService implements CodificationService {

    // recursive function to print the
    // huffman-code through the tree traversal.
    // Here s is the huffman - code generated.
    public static void printCode(HuffmanNode root, String s, Map<Character, String> huffmanTree) {

        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left
                == null
                && root.right
                == null) {

            // c is the character in the node
            huffmanTree.put(root.c, s);
//            System.out.println(root.c + ":" + s);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0", huffmanTree);
        printCode(root.right, s + "1", huffmanTree);
    }

    @Override
    public void encode(WriterInterface writer, ReaderInterface reader) throws IOException, WrongFormatExpection {
        Codification.setCodificationName("Huffman Estático");
        writer.writeSemHamming(getBitsIdentificacaoAlgoritmo(writer));

        int character = 0;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        int i = 0;
        long lengthChar = reader.getFile().length();
        int[] values = new int[(int) lengthChar];
        while ((character = reader.read()) != -1) {
            values[i++] = character;
            if (map.containsKey(character)) {
                int lastValue = map.get(character) + 1;
                map.put(character, lastValue);
            } else {
                map.put(character, 1);
            }
        }

        Map<Integer, Integer> sortedMap = this.sortByValue(map, false);
        Codification.setHuffmanSorted(sortedMap);

        int n = map.size();
        char[] charArray = new char[n];
        int[] charfreq = new int[n];

        int length = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int key = entry.getKey();
            int value = entry.getValue();
            charArray[length] = (char) key;
            charfreq[length++] = value;
        }

        // creating a priority queue q.
        // makes a min-priority queue(min-heap).
        PriorityQueue<HuffmanNode> q
                = new PriorityQueue<HuffmanNode>(n, new MyComparator());

        for (i = 0; i < n; i++) {

            // creating a Huffman node object
            // and add it to the priority queue.
            HuffmanNode hn = new HuffmanNode();

            hn.c = charArray[i];
            hn.data = charfreq[i];

            hn.left = null;
            hn.right = null;

            // add functions adds
            // the huffman node to the queue.
            q.add(hn);
        }

        // create a root node
        HuffmanNode root = null;

        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (q.size() > 1) {

            // first min extract.
            HuffmanNode x = q.peek();
            q.poll();

            // second min extarct.
            HuffmanNode y = q.peek();
            q.poll();

            // new node f which is equal
            HuffmanNode f = new HuffmanNode();

            // to the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.data = x.data + y.data;
            f.c = '-';

            // first extracted node as left child.
            f.left = x;

            // second extracted node as the right child.
            f.right = y;

            // marking the f node as the root node.
            root = f;

            // add this node to the priority-queue.
            q.add(f);
        }

        Map<Character, String> huffmanTree = new HashMap<Character, String>();

        // print the codes by traversing the tree
        printCode(root, "", huffmanTree);
        Codification.setHuffmanTree(huffmanTree);

        char doisPontos = ':';
        String doisPontosFinal = StringUtils.integerToStringBinary((int) doisPontos, 8);
        char virgula = ',';
        String virgulaFinal = StringUtils.integerToStringBinary((int) virgula, 8);

        // Write the tree on file
        for (Map.Entry<Character, String> entry : huffmanTree.entrySet()) {
            char key = entry.getKey();
            String keyFinal = StringUtils.integerToStringBinary((int) key, 8);

            String valueFinal = "";
            for (char c : entry.getValue().toCharArray()) {
                valueFinal += StringUtils.integerToStringBinary((int) c, 8);
            }

            //System.out.println("Tree = " + keyFinal + " = " + doisPontosFinal + " = " + valueFinal +" = " + virgulaFinal);
            writer.writeWithoutRepository(keyFinal + doisPontosFinal + valueFinal + virgulaFinal);
        }

        char newLineVariable = '\n';
        String newLineVariableFinal = StringUtils.integerToStringBinary((int) newLineVariable, 8);
        writer.writeWithoutRepository(newLineVariableFinal + newLineVariableFinal + newLineVariableFinal);

        for (i = 0; i < values.length; i++) {
            int key = values[i];
            System.out.print(huffmanTree.get((char) key));
            writer.write(huffmanTree.get((char) key));
        }

        writer.close();
        reader.close();
    }

    @Override
    public void decode(WriterInterface writer, ReaderInterface reader) throws IOException, WrongFormatExpection {
        System.out.println();
        Codification.setCodificationName("Huffman Estático");
        reader.readCabecalho();// apenas para passar os bits do cabeçalho
        char character;
        StringBuilder returnedBits = new StringBuilder("");

        Map<String, Character> huffmanTree = new HashMap<String, Character>();
        while ((character = (char) reader.readNextChar()) != 65535) {
            returnedBits.append(character);
            if (returnedBits.toString().endsWith("000010100000101000001010")) {
                String tree = returnedBits.substring(0, returnedBits.length() - 24);
                char key = '0';
                String value = "";
                boolean isKey = true;
                for (int i = 0; i < tree.length(); i += 8) {
                    String returnedByte = tree.substring(i, i + 8);
                    int parseInt = Integer.parseInt(returnedByte, 2);
                    char c = (char) parseInt;
                    System.out.print((char) parseInt);

                    if (isKey) {
                        if (c == ':') {
                            isKey = false;
                        } else {
                            key = c;
                        }
                    } else {
                        if (c == ',') {
                            huffmanTree.put(value, key);
                            isKey = true;
                            value = "";
                        } else {
                            value += c;
                        }
                    }
                }
                break;
            }
        }

        //0111,1010,110,1110,010,100,000,1111,110,

        StringBuilder bitsReaded = new StringBuilder("");
        while ((character = (char) reader.readNextChar()) != 65535) {
            System.out.print(character);
            bitsReaded.append(character);

            if (huffmanTree.containsKey(bitsReaded.toString())) {
                char huffmanValue = huffmanTree.get(bitsReaded.toString());
                writer.write(huffmanValue, bitsReaded.toString());
                bitsReaded = new StringBuilder("");
            }
        }

        writer.close();
        reader.close();
    }

    @Override
    public String getBitsIdentificacaoAlgoritmo(WriterInterface writer) {
        String firstByte = "00111111"; //identificaçãoAlgoritmo
        String secondByte = "00000000"; // informação extra goloumb
        return firstByte + secondByte;
    }

    private Map<Integer, Integer> sortByValue(Map<Integer, Integer> unsortMap, final boolean order) {
        List<Map.Entry<Integer, Integer>> list = new LinkedList<>(unsortMap.entrySet());

        // Sorting the list based on values
        list.sort((o1, o2) -> order ? o1.getValue().compareTo(o2.getValue()) == 0
                ? o1.getKey().compareTo(o2.getKey())
                : o1.getValue().compareTo(o2.getValue()) : o2.getValue().compareTo(o1.getValue()) == 0
                ? o2.getKey().compareTo(o1.getKey())
                : o2.getValue().compareTo(o1.getValue()));
        return list.stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (a, b) -> b, LinkedHashMap::new));

    }
}

// This code is contributed by Kunwar Desh Deepak Singh